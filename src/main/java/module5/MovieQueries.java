package module5;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * @author Mark Forster
 *
 *         The MovieQueries class.
 * 
 *         Loads a list of movies from a database into a list and manages the
 *         length of the list as well. Also allows new movies to be added to the
 *         list and database.
 * 
 *         The attributes of the MovieQueries class are...
 * 
 *         CREATE_URL 	The database URL which creates a new database. 
 *         URL 		  	The database URL which connects to the existing database. 
 *         connection 	The database connection object. 
 *         sqlStatement The SQL statement to execute against the database. 
 *         movieList 	The list of movies from the database.
 *         listLength 	The length of the movies list.
 *
 */
public class MovieQueries {
	private static final String CREATE_URL = "jdbc:derby:movie2;create=true;";
	private static final String URL = "jdbc:derby:movie2;";

	private Connection connection;
	private PreparedStatement sqlStatement;
	private ObservableList<Movie> movieList = FXCollections.observableArrayList();
	private int listLength = 0;

	/**
	 * The constructor for the class. Connects to the database and reads the list of
	 * movies from the database and sets the listLength.
	 * 
	 */
	public MovieQueries() {
		try {
			View.LOGGER.info("Connecting to database URL: " + CREATE_URL);
			connection = DriverManager.getConnection(CREATE_URL);

			try {
				sqlStatement = connection.prepareStatement("DROP TABLE Movie2");
				boolean dropSuccessful = sqlStatement.execute();
				if (!dropSuccessful) {
					View.LOGGER.info("Table Movie2 doesn''t exist.");
				}
			} catch (Exception e) {
				View.LOGGER.info("Table Movie2 doesn''t exist.");
			}

			resetExampleDatabase();

			sqlStatement = connection.prepareStatement("Select id, name, description, rating From Movie2");
			ResultSet result = sqlStatement.executeQuery();

			// Loop through the result set and add each movie to the list of movies...
			while (result.next()) {
				int id = result.getInt("id");
				String name = result.getString("name");
				String description = result.getString("description");
				int rating = result.getInt("rating");

				movieList.add(new Movie(id, name, description, rating));
				this.listLength++;
			}

			// Close the result set...
			result.close();

			// Close the connection...
			close();

		} catch (SQLException sqlException) {
			sqlException.printStackTrace();
		}
	}

	/**
	 * Returns the list of movies.
	 * 
	 */
	public ObservableList<Movie> getMovieList() {
		return movieList;
	}

	/**
	 * Add a movie to the movie list and the database.
	 * 
	 * @param id          The unique movie ID which is automatically generated by
	 *                    the system.
	 * @param name        The name of the movie.
	 * @param description A description of the movie.
	 * @param rating      The rating (1-10) of the movie.
	 * 
	 * @return Was the addition of the movie successful or not?
	 */
	public boolean addMovie(int id, String name, String description, int rating) {

		Movie newMovie = new Movie(id, name, description, rating);

		try {
			this.movieList.add(newMovie);
			this.listLength++;
			boolean success = addToDatabase(id, name, description, rating);

			return success;
		} catch (Exception ex) {
			return false;
		}
	}

	/**
	 * Add a movie to the database.
	 * 
	 * @param id          The unique movie ID which is automatically generated by
	 *                    the system.
	 * @param name        The name of the movie.
	 * @param description A description of the movie.
	 * @param rating      The rating (1-10) of the movie.
	 * 
	 * @return Was the addition of the movie to the database successful or not?
	 */
	public boolean addToDatabase(int id, String name, String description, int rating) {

		try {
			View.LOGGER.info("Connecting to database URL: " + URL);
			connection = DriverManager.getConnection(URL);

			sqlStatement = connection.prepareStatement("INSERT INTO Movie2 VALUES (" + Integer.toString(id) + ", '"
					+ name + "', '" + description + "', " + Integer.toString(rating) + ")");
			ResultSet result = sqlStatement.executeQuery();

			// Close the result set...
			result.close();

			// Close the connection...
			close();

			return true;

		} catch (SQLException sqlException) {
			return false;
		}
	}

	/**
	 * Returns the length of the movie list.
	 * 
	 * @return The length of the movie list.
	 */
	public int getListLength() {
		return this.listLength;
	}

	/**
	 * Resets the database by creating the Movie table and inserting a pre-defined
	 * list of movies into the table.
	 * 
	 */
	void resetExampleDatabase() {
		Statement stmt = null;
		try {
			stmt = connection.createStatement();
			stmt.execute("CREATE TABLE Movie2 (" + "id INTEGER PRIMARY KEY," + "name VARCHAR(255),"
					+ "description VARCHAR(255)," + "rating INTEGER)");
			View.LOGGER.info("Created Movie2 table.\nAdding pre-define movies into Movie2 table");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (1, 'The Shawshank Redemption', 'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.', 10)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (2, 'The Godfather', 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (3, 'The Dark Knight', 'When the menace known as The Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham. ', 8)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (4, 'The Lord of the Rings: The Return of the King ', 'Gandalf and Aragorn lead the World of Men against Sauron''s army to draw his gaze from Frodo and Sam as they approach Mount Doom with the One Ring.', 7)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (5, 'Pulp Fiction', 'The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (6, 'Schindler''s List', 'In German-occupied Poland during World War II, industrialist Oskar Schindler gradually becomes concerned for his Jewish workforce after witnessing their persecution by the Nazis.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (7, '12 Angry Men', 'A jury holdout attempts to prevent a miscarriage of justice by forcing his colleagues to reconsider the evidence.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (8, 'Inception', 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (9, 'Fight Club', 'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.', 9)");
			stmt.executeUpdate(
					"INSERT INTO Movie2 VALUES (10, 'Forrest Gump', 'The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other history unfold through the perspective of an Alabama man with an IQ of 75.', 9)");

		} catch (SQLException sqlException) {
			sqlException.printStackTrace();
		}

	}

	/**
	 * Closes the database connection.
	 * 
	 */
	public void close() {
		try {
			connection.close();
		} catch (SQLException sqlExeption) {
			sqlExeption.printStackTrace();
		}
	}
}
